% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_fill_cross_blended.R
\name{scale_fill_cross_blended}
\alias{scale_fill_cross_blended}
\alias{scale_fill_cross_blended_d}
\alias{scale_fill_cross_blended_c}
\alias{scale_fill_cross_blended_b}
\alias{cross_blended.colors}
\title{Cross-blended Hypsometric Tints fill scales}
\source{
Patterson, T., & Jenny, B. (2011). The Development and
Rationale of Cross-blended Hypsometric Tints. \emph{Cartographic Perspectives,}
(69), 31 - 46. \doi{10.14714/CP69.20}.
}
\usage{
scale_fill_cross_blended_d(
  palette = "cold_humid",
  ...,
  alpha = 1,
  direction = 1
)

scale_fill_cross_blended_c(
  palette = "cold_humid",
  ...,
  alpha = 1,
  direction = 1,
  values = NULL,
  limits = NULL,
  as_tint = FALSE,
  na.value = NA,
  guide = "colourbar"
)

scale_fill_cross_blended_b(
  palette = "cold_humid",
  ...,
  alpha = 1,
  direction = 1,
  values = NULL,
  limits = NULL,
  as_tint = FALSE,
  na.value = NA,
  guide = "coloursteps"
)

cross_blended.colors(n, palette = "cold_humid", alpha = 1, rev = FALSE)
}
\arguments{
\item{palette}{A valid palette name. The name is matched to the list of
available palettes, ignoring upper vs. lower case. See
\link{cross_blended_hypsometric_tints_db} for more info. Values available are:
\code{"arid"}, \code{"cold_humid"}, \code{"polar"}, \code{"warm_humid"}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:discrete_scale]{discrete_scale()}},
\code{\link[ggplot2:continuous_scale]{continuous_scale()}}, or \link[ggplot2]{binned_scale} to control name, limits, breaks,
labels and so forth.}

\item{alpha}{The alpha transparency, a number in [0,1], see argument alpha in
\code{\link[grDevices]{hsv}}.}

\item{direction}{Sets the order of colors in the scale. If 1, the default, colors
are ordered from darkest to lightest. If -1, the order of colors is reversed.}

\item{values}{if colours should not be evenly positioned along the gradient
this vector gives the position (between 0 and 1) for each colour in the
\code{colours} vector. See \code{\link[scales:rescale]{rescale()}} for a convenience function
to map an arbitrary range to between 0 and 1.}

\item{limits}{One of:
\itemize{
\item \code{NULL} to use the default scale range
\item A numeric vector of length two providing limits of the scale.
Use \code{NA} to refer to the existing minimum or maximum
\item A function that accepts the existing (automatic) limits and returns
new limits. Also accepts rlang \link[rlang:as_function]{lambda} function
notation.
Note that setting limits on positional scales will \strong{remove} data outside of the limits.
If the purpose is to zoom, use the limit argument in the coordinate system
(see \code{\link[ggplot2:coord_cartesian]{coord_cartesian()}}).
}}

\item{as_tint}{Logical. Should the scale use predefined limits? See
\strong{Details}.}

\item{na.value}{Missing values will be replaced with this value.}

\item{guide}{A function used to create a guide or its name. See
\code{\link[ggplot2:guides]{guides()}} for more information.}

\item{n}{the number of colors (\eqn{\ge 1}) to be in the
    palette.}

\item{rev}{logical indicating whether the ordering of the colors should
    be reversed.}
}
\value{
The corresponding ggplot2 layer with the values applied to the
\code{fill} aesthetics.
}
\description{
Implementation of the cross-blended hypsometric gradients presented on
\doi{10.14714/CP69.20}. These scales can act as
\href{https://en.wikipedia.org/wiki/Hypsometric_tints}{hypsometric tints}
using the option \code{as_tint = TRUE}. Three fill scales are provided:
\itemize{
\item \code{scale_fill_cross_blended_d()}: For discrete values.
\item \code{scale_fill_cross_blended_c()}: For continuous values.
\item \code{scale_fill_cross_blended_b()}: For binning continuous values.
}

Additionally, a color palette \code{cross_blended.colors()} is provided. See also
\code{\link[grDevices:palettes]{grDevices::terrain.colors()}} for details.
}
\details{
When using the parameter \code{as_tint = TRUE}, the position of the gradients and
the limits of the palette are redefined. Instead of treating the color
palette as a continuous gradient, they are rescaled to act as a hypsometric
tint. A rough description of these tints are:
\itemize{
\item Blue colors: Negative values.
\item Green colors: 0 to 1.000 values.
\item Browns: 1000 to 4.000 values.
\item Whites: Values higher than 4.000.
}

The following orientation would vary depending on the palette definition
(see \link{cross_blended_hypsometric_tints_db} for an example on how this
could be achieved).

Note that the combination of the palette and \code{as_tint = TRUE} may not be
always suitable for your specific data. For example, raster of small parts
of the globe (and with a limited range of elevations) may not be well
represented. As an example, a raster with a range of values on \verb{[100, 200]}
would appear almost as an uniform color.

This could be adjusted using the \code{limits}/\code{values} provided by \strong{ggplot2}.
See \strong{Examples}.
}
\examples{
\donttest{

filepath <- system.file("extdata/volcano2.tif", package = "tidyterra")

library(terra)
volcano2_rast <- rast(filepath)

# Palette
plot(volcano2_rast, col = cross_blended.colors(100))

library(ggplot2)
ggplot() +
  geom_spatraster(data = volcano2_rast) +
  scale_fill_cross_blended_c()

# Use hypsometric limits...
ggplot() +
  geom_spatraster(data = volcano2_rast) +
  scale_fill_cross_blended_c(as_tint = TRUE, palette = "arid")

# ...but not suitable for the range of the raster: adjust
my_lims <- c(70, 200)
ggplot() +
  geom_spatraster(data = volcano2_rast) +
  scale_fill_cross_blended_c(
    as_tint = TRUE, palette = "arid",
    limits = my_lims
  )

# Full map with true tints

f_asia <- system.file("extdata/asia.tif", package = "tidyterra")
asia <- rast(f_asia)

ggplot() +
  geom_spatraster(data = asia) +
  scale_fill_cross_blended_c(
    as_tint = TRUE, palette = "warm_humid",
    na.value = "lightblue"
  ) +
  labs(fill = "elevation (m)")


# Binned
ggplot() +
  geom_spatraster(data = volcano2_rast) +
  scale_fill_cross_blended_b(breaks = seq(70, 200, 25), palette = "arid")

# With limits and breaks
ggplot() +
  geom_spatraster(data = volcano2_rast) +
  scale_fill_cross_blended_b(
    breaks = seq(75, 200, 25), palette = "polar",
    as_tint = TRUE,
    limits = c(75, 200)
  )

# With discrete values
factor <- volcano2_rast \%>\% mutate(cats = cut(elevation,
  breaks = c(100, 120, 130, 150, 170, 200),
  labels = c(
    "Very Low", "Low", "Average", "High",
    "Very High"
  )
))


ggplot() +
  geom_spatraster(data = factor, aes(fill = cats)) +
  scale_fill_cross_blended_d(na.value = "gray10", palette = "cold_humid")
}

# Display all the cross_blended palettes

pals <- unique(cross_blended_hypsometric_tints_db$pal)

# Helper fun for plotting

ncols <- 128
rowcol <- grDevices::n2mfrow(length(pals))

opar <- par(no.readonly = TRUE)
par(mfrow = rowcol, mar = rep(1, 4))

for (i in pals) {
  image(
    x = seq(1, ncols), y = 1, z = as.matrix(seq(1, ncols)),
    col = cross_blended.colors(ncols, i), main = i,
    ylab = "", xaxt = "n", yaxt = "n", bty = "n"
  )
}
par(opar)
}
\seealso{
\link{cross_blended_hypsometric_tints_db}, \code{\link[terra:plot]{terra::plot()}},
\code{\link[ggplot2:scale_viridis]{ggplot2::scale_fill_viridis_c()}}

Other gradient scales and palettes for hypsometry:
\code{\link{scale_fill_hypso}},
\code{\link{scale_fill_terrain}},
\code{\link{scale_fill_whitebox}},
\code{\link{scale_fill_wiki}}
}
\concept{gradients}
