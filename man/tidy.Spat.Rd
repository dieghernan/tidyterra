% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tidy-Spat.R
\name{tidy.Spat}
\alias{tidy.Spat}
\alias{tidy.SpatRaster}
\alias{tidy.SpatVector}
\alias{tidy.SpatGraticule}
\alias{tidy.SpatExtent}
\title{Turn \verb{Spat*} object into a tidy tibble}
\usage{
\method{tidy}{SpatRaster}(
  x,
  ...,
  .name_repair = "unique",
  maxcell = terra::ncell(x) * 1.1,
  pivot = FALSE
)

\method{tidy}{SpatVector}(x, ...)

\method{tidy}{SpatGraticule}(x, ...)

\method{tidy}{SpatExtent}(x, ..., crs = "")
}
\arguments{
\item{x}{A \code{SpatRaster} created with \code{\link[terra:rast]{terra::rast()}} or a \code{SpatVector}
created with \code{\link[terra:vect]{terra::vect()}}. Also support \code{SpatGraticule} (see
\code{\link[terra:graticule]{terra::graticule()}}) and \code{SpatExtent} (see \code{\link[terra:ext]{terra::ext()}}).}

\item{...}{Ignored by these methods.}

\item{.name_repair}{Treatment of problematic column names:
\itemize{
\item \code{"minimal"}: No name repair or checks, beyond basic existence.
\item \code{"unique"}: Make sure names are unique and not empty.
\item \code{"check_unique"}: (default value), no name repair, but check they are
\code{unique}.
\item \code{"universal"}: Make the names \code{unique} and syntactic.
\item a function: apply custom name repair (e.g., \code{.name_repair = make.names}
for names in the style of base \strong{R}).
\item A purrr-style anonymous function, see \code{\link[rlang:as_function]{rlang::as_function()}}.
}}

\item{maxcell}{positive integer. Maximum number of cells to use for
the plot.}

\item{pivot}{Logical. When \code{TRUE} the \code{SpatRaster} would be provided on
\link[tidyr:pivot_longer]{long format}. When \code{FALSE} (the default) it would
be provided as a data frame with a column for each layer. See \strong{Details}.}

\item{crs}{Input potentially including or representing a CRS. It could be
a \code{sf/sfc} object, a \code{SpatRaster/SpatVector} object, a \code{crs} object from
\code{\link[sf:st_crs]{sf::st_crs()}}, a character (for example a \href{https://proj.org/en/9.3/operations/projections/index.html}{proj4 string}) or a
integer (representing an \href{https://epsg.io/}{EPSG} code).}
}
\value{
\code{\link[=tidy.SpatVector]{tidy.SpatVector()}}, \code{\link[=tidy.SpatGraticule]{tidy.SpatGraticule()}} and \code{\link[=tidy.SpatExtent]{tidy.SpatExtent()}}
return a \code{\link[sf:sf]{sf}} object.

\code{\link[=tidy.SpatRaster]{tidy.SpatRaster()}} returns a \code{\link[tibble:tibble]{tibble}}. See \strong{Methods}.
}
\description{
Turn \verb{Spat*} object into a tidy tibble. This is similar to
\code{\link{fortify.Spat}}, and it is provided just in case \code{\link[ggplot2:fortify]{ggplot2::fortify()}}
method is deprecated in the future.
}
\section{Methods}{


Implementation of the \strong{generic} \code{\link[generics:tidy]{generics::tidy()}} method.
\subsection{\code{SpatRaster}}{

Return a tibble than can be used with \verb{ggplot2::geom_*} like
\code{\link[ggplot2:geom_point]{ggplot2::geom_point()}}, \code{\link[ggplot2:geom_tile]{ggplot2::geom_raster()}}, etc.

The resulting tibble includes the coordinates on the columns \verb{x, y}. The
values of each layer are included as additional columns named as per the
name of the layer on the \code{SpatRaster}.

The CRS of the \code{SpatRaster} can be retrieved with
\code{attr(tidySpatRaster, "crs")}.

It is possible to convert the tidy object onto a \code{SpatRaster} again with
\code{\link[=as_spatraster]{as_spatraster()}}.

When \code{pivot = TRUE} the \code{SpatRaster} is provided in a "long" format (see
\code{\link[tidyr:pivot_longer]{tidyr::pivot_longer()}}). The tidy object would have the following
columns:
\itemize{
\item \verb{x,y}: Coordinates (center) of the cell on the corresponding CRS.
\item \code{lyr}: Indicating the name of the \code{SpatRaster} layer of \code{value}.
\item \code{value}: The value of the \code{SpatRaster} in the corresponding \code{lyr}.
}

This option may be useful when using several \verb{geom_*} and for faceting.
}

\subsection{\code{SpatVector}, \code{SpatGraticule} and \code{SpatExtent}}{

Return a \code{\link[sf:sf]{sf}} object than can be used with \code{\link[ggplot2:ggsf]{ggplot2::geom_sf()}}.
}
}

\examples{
\donttest{

# Get a SpatRaster
r <- system.file("extdata/volcano2.tif", package = "tidyterra") \%>\%
  terra::rast() \%>\%
  terra::project("EPSG:4326")

r_tidy <- tidy(r)

r_tidy

# Back to a SpatRaster with
as_spatraster(r_tidy)

# SpatVector
cyl <- terra::vect(system.file("extdata/cyl.gpkg", package = "tidyterra"))

cyl

tidy(cyl)

# SpatExtent
ex <- cyl \%>\% terra::ext()

ex

tidy(ex)

# With crs
tidy(ex, crs = pull_crs(cyl))

# SpatGraticule
grat <- terra::graticule(60, 30, crs = "+proj=robin")

grat
tidy(grat)
}
}
\seealso{
\code{\link[sf:st_as_sf]{sf::st_as_sf()}}, \code{\link{as_tibble.Spat}}, \code{\link[=as_spatraster]{as_spatraster()}}, \code{\link{fortify.Spat}},
\code{\link[generics:tidy]{generics::tidy()}}.

Other \CRANpkg{generics} methods:
\code{\link{glance.Spat}},
\code{\link{required_pkgs.Spat}}

Coercing objects:
\code{\link{as_coordinates}()},
\code{\link{as_sf}()},
\code{\link{as_spatraster}()},
\code{\link{as_spatvector}()},
\code{\link{as_tibble.Spat}},
\code{\link{fortify.Spat}}
}
\concept{coerce}
\concept{generics.methods}
